import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import {
  Loader2,
  BrainCircuit,
  Copy,
  Save,
  CheckCircle,
  X,
  MessageSquare,
  FileText,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import {
  formatAiResponseTime,
  getAiRecommendationStatus,
  getAiRecommendationColor,
} from "@/utils/formatHelpers";

interface SessionSummaryProps {
  patient: any;
  transcription?: string;
  isCallActive: boolean;
  onSaveSummary?: (summary: string) => void;
}

const SessionSummary: React.FC<SessionSummaryProps> = ({
  patient,
  transcription = "",
  isCallActive,
  onSaveSummary,
}) => {
  const [summary, setSummary] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [userInput, setUserInput] = useState<string>("");
  const [responseTime, setResponseTime] = useState<number>(0);
  const [summaryStatus, setSummaryStatus] = useState<string>("draft");
  const [key, setKey] = useState<number>(0); // For forcing re-render

  // Auto-generate summary when transcription updates
  useEffect(() => {
    // Only auto-generate if there's substantial transcription and we're not already generating
    if (
      transcription &&
      transcription.length > 100 &&
      !summary &&
      !isGenerating
    ) {
      handleGenerateSummary();
    }
  }, [transcription]);

  const handleGenerateSummary = async () => {
    if (!transcription && !userInput) {
      toast.warning("No transcription or notes available", {
        description: "Please add notes or enable transcription first",
      });
      return;
    }

    setIsGenerating(true);
    const startTime = Date.now();

    // Simulate AI response time
    setTimeout(() => {
      // Generate AI summary based on transcription and patient data
      // This would call an AI service in a real implementation
      const generatedSummary = generateMockSummary(
        transcription || userInput,
        patient
      );

      const endTime = Date.now();
      setResponseTime(endTime - startTime);
      setSummary(generatedSummary);
      setIsGenerating(false);
      setSummaryStatus("draft");

      toast.success("Summary generated", {
        description: "AI consultation summary is ready for review",
      });
    }, 2500);
  };

  const handleCopySummary = () => {
    navigator.clipboard.writeText(summary);
    toast.success("Summary copied to clipboard");
  };

  const handleSaveSummary = () => {
    if (onSaveSummary) {
      onSaveSummary(summary);
    }

    setSummaryStatus("saved");

    toast.success("Summary saved to patient record", {
      description: `Summary saved to ${patient.name}'s medical record in `,
    });
  };

  const handleRejectSummary = () => {
    setSummary("");
    setKey((prevKey) => prevKey + 1);
    toast.info("Summary rejected");
  };

  const handleUserInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setUserInput(e.target.value);
  };

  const generateMockSummary = (text: string, patient: any) => {
    const patientName = patient.name || "Patient";
    const condition = patient.condition || "presented condition";

    // This is a template for the mock summary
    // In a real implementation, this would be generated by an AI model
    return `# Telehealth Consultation Summary

**Patient:** ${patientName}
**Date:** ${new Date().toLocaleDateString()}
**Provider:** Dr. Sarah Johnson

## Subjective
Patient is a ${
      patient.age || "middle-aged"
    } individual with a history of ${condition}. Patient reports ${getRandomSymptom()}. Patient also mentions ${getRandomContext()}.

## Objective
- Vital signs: Within normal limits
- General appearance: Alert and oriented
- ${getRandomExamFinding()}

## Assessment
1. ${condition} - ${getRandomAssessment()}
2. ${getRandomSecondaryDiagnosis()}

## Plan
1. ${getRandomTreatmentPlan()}
2. Follow up in 2 weeks via telehealth
3. ${getRandomLabOrder()}
4. Patient instructed to call if symptoms worsen

This note was generated with AI assistance and verified by the provider.`;
  };

  const getRandomSymptom = () => {
    const symptoms = [
      "increasing fatigue over the past week",
      "occasional headaches that respond to over-the-counter medication",
      "mild shortness of breath during physical activity",
      "intermittent joint pain, particularly in the mornings",
      "difficulty sleeping through the night",
    ];
    return symptoms[Math.floor(Math.random() * symptoms.length)];
  };

  const getRandomContext = () => {
    const contexts = [
      "no changes to current medication regimen",
      "stress at work may be contributing to symptoms",
      "has been following the recommended diet restrictions",
      "some improvement after starting the new medication last month",
      "concerns about family history of similar conditions",
    ];
    return contexts[Math.floor(Math.random() * contexts.length)];
  };

  const getRandomExamFinding = () => {
    const findings = [
      "Cardiovascular: Regular rate and rhythm, no murmurs",
      "Respiratory: Clear breath sounds bilaterally",
      "Musculoskeletal: Full range of motion in all extremities",
      "Neurological: Cranial nerves II-XII intact",
      "Skin: No rashes or lesions noted",
    ];
    return findings[Math.floor(Math.random() * findings.length)];
  };

  const getRandomAssessment = () => {
    const assessments = [
      "stable, continued monitoring advised",
      "showing improvement with current management",
      "mild exacerbation likely due to recent lifestyle changes",
      "controlled but requires medication adjustment",
      "needs further diagnostic evaluation",
    ];
    return assessments[Math.floor(Math.random() * assessments.length)];
  };

  const getRandomSecondaryDiagnosis = () => {
    const diagnoses = [
      "Mild anxiety - likely situational",
      "Vitamin D deficiency - supplement recommended",
      "Insomnia - sleep hygiene education provided",
      "Seasonal allergies - recommend OTC antihistamine",
      "Diet-controlled hyperlipidemia - continue current management",
    ];
    return diagnoses[Math.floor(Math.random() * diagnoses.length)];
  };

  const getRandomTreatmentPlan = () => {
    const plans = [
      "Continue current medication regimen",
      "Increase fluid intake and daily activity",
      "Start on new prescription, instructions provided",
      "Refer to specialist for consultation",
      "Implement lifestyle modifications as discussed",
    ];
    return plans[Math.floor(Math.random() * plans.length)];
  };

  const getRandomLabOrder = () => {
    const labs = [
      "Complete blood count ordered to monitor response",
      "Metabolic panel to be completed before next visit",
      "No laboratory tests needed at this time",
      "Lipid panel to assess cardiovascular risk factors",
      "Thyroid function tests to rule out metabolic causes",
    ];
    return labs[Math.floor(Math.random() * labs.length)];
  };

  return (
    <Card className="mb-4">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="text-lg">Consultation Summary</CardTitle>
            <CardDescription>
              AI-generated clinical documentation
            </CardDescription>
          </div>
          {summaryStatus === "saved" ? (
            <Badge className="bg-green-100 text-green-800">Saved to </Badge>
          ) : summary ? (
            <Badge variant="outline" className="bg-yellow-100 text-yellow-800">
              Draft
            </Badge>
          ) : null}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {!summary && !isGenerating && (
            <div className="space-y-3">
              <Textarea
                placeholder="Enter additional notes or context for the AI summary generation..."
                className="min-h-[100px]"
                value={userInput}
                onChange={handleUserInputChange}
              />
            </div>
          )}

          {isGenerating ? (
            <div className="flex flex-col items-center justify-center py-8 space-y-4">
              <Loader2 className="h-8 w-8 text-primary animate-spin" />
              <p className="text-center text-muted-foreground">
                Generating comprehensive clinical summary...
              </p>
              <Badge variant="outline" className="bg-blue-50 text-blue-700">
                <BrainCircuit className="h-3 w-3 mr-1" />
                AI
              </Badge>
            </div>
          ) : summary ? (
            <div className="space-y-3" key={key}>
              <div className="rounded-md border bg-white">
                <div className="p-4 whitespace-pre-line max-h-[350px] overflow-y-auto">
                  {summary}
                </div>
              </div>

              <div className="flex justify-between items-center">
                <div className="flex items-center gap-1">
                  <Badge variant="outline" className="bg-blue-50 text-blue-700">
                    <BrainCircuit className="h-3 w-3 mr-1" />
                    AI Generated
                  </Badge>
                  {responseTime > 0 && (
                    <span className="text-xs text-muted-foreground">
                      {formatAiResponseTime(responseTime)}
                    </span>
                  )}
                </div>

                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleRejectSummary}
                  >
                    <X className="h-4 w-4 mr-1" />
                    Reject
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleCopySummary}
                  >
                    <Copy className="h-4 w-4 mr-1" />
                    Copy
                  </Button>
                  <Button
                    variant="default"
                    size="sm"
                    onClick={handleSaveSummary}
                  >
                    <Save className="h-4 w-4 mr-1" />
                    Save to
                  </Button>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-8 space-y-3 border rounded-md bg-gray-50">
              <FileText className="h-10 w-10 text-muted-foreground" />
              <p className="text-center text-muted-foreground">
                No summary generated yet
              </p>
            </div>
          )}

          {!isGenerating && (
            <div className="flex justify-center">
              <Button
                onClick={handleGenerateSummary}
                disabled={isGenerating || (!transcription && !userInput)}
                className="w-full sm:w-auto"
              >
                <BrainCircuit className="h-4 w-4 mr-2" />
                {summary ? "Regenerate Summary" : "Generate Summary"}
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default SessionSummary;
