/**\n * CMS1500ValidationPanel Component\n * Detailed validation panel for CMS-1500 form requirements\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport {\n  CheckCircle,\n  AlertCircle,\n  AlertTriangle,\n  RefreshCw,\n  ChevronDown,\n  ChevronRight,\n  FileCheck,\n  User,\n  Building,\n  CreditCard,\n  Stethoscope,\n  Loader2\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface CMS1500ValidationPanelProps {\n  claimId: number;\n  onValidationChange?: (isValid: boolean) => void;\n  className?: string;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  completionPercentage: number;\n  categories: ValidationCategory[];\n}\n\ninterface ValidationError {\n  field: string;\n  message: string;\n  category: string;\n  severity: 'error' | 'warning';\n  suggestion?: string;\n}\n\ninterface ValidationWarning {\n  field: string;\n  message: string;\n  category: string;\n  impact: 'low' | 'medium' | 'high';\n}\n\ninterface ValidationCategory {\n  name: string;\n  icon: React.ReactNode;\n  status: 'valid' | 'warning' | 'error';\n  errorCount: number;\n  warningCount: number;\n  fields: string[];\n}\n\nconst CMS1500ValidationPanel: React.FC<CMS1500ValidationPanelProps> = ({\n  claimId,\n  onValidationChange,\n  className\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [validation, setValidation] = useState<ValidationResult | null>(null);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    if (claimId) {\n      loadValidation();\n    }\n  }, [claimId]);\n\n  useEffect(() => {\n    if (validation) {\n      onValidationChange?.(validation.isValid);\n    }\n  }, [validation, onValidationChange]);\n\n  /**\n   * Load comprehensive validation\n   */\n  const loadValidation = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/v1/rcm/claims/${claimId}/cms1500/validate`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to validate form');\n      }\n\n      const data = await response.json();\n      const rawValidation = data.data.validation;\n      \n      // Transform validation data into structured format\n      const structuredValidation = transformValidationData(rawValidation);\n      setValidation(structuredValidation);\n    } catch (error) {\n      console.error('Error loading validation:', error);\n      toast.error('Failed to load validation data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Transform raw validation data into structured format\n   */\n  const transformValidationData = (rawValidation: any): ValidationResult => {\n    const errors: ValidationError[] = rawValidation.errors.map((error: string) => ({\n      field: extractFieldFromError(error),\n      message: error,\n      category: categorizeError(error),\n      severity: 'error' as const,\n      suggestion: getSuggestionForError(error)\n    }));\n\n    const warnings: ValidationWarning[] = rawValidation.warnings.map((warning: string) => ({\n      field: extractFieldFromError(warning),\n      message: warning,\n      category: categorizeError(warning),\n      impact: getWarningImpact(warning)\n    }));\n\n    const categories = createValidationCategories(errors, warnings);\n    const completionPercentage = calculateCompletionPercentage(errors, warnings);\n\n    return {\n      isValid: rawValidation.isValid,\n      errors,\n      warnings,\n      completionPercentage,\n      categories\n    };\n  };\n\n  /**\n   * Extract field name from error message\n   */\n  const extractFieldFromError = (error: string): string => {\n    // Simple extraction - in a real implementation, this would be more sophisticated\n    if (error.includes('Patient name')) return 'patient_name';\n    if (error.includes('Provider NPI')) return 'provider_npi';\n    if (error.includes('diagnosis')) return 'diagnosis_codes';\n    if (error.includes('service')) return 'service_lines';\n    if (error.includes('address')) return 'address';\n    if (error.includes('insurance')) return 'insurance';\n    return 'general';\n  };\n\n  /**\n   * Categorize error by type\n   */\n  const categorizeError = (error: string): string => {\n    if (error.includes('Patient') || error.includes('name') || error.includes('address')) return 'patient';\n    if (error.includes('Provider') || error.includes('NPI') || error.includes('tax')) return 'provider';\n    if (error.includes('insurance') || error.includes('policy')) return 'insurance';\n    if (error.includes('diagnosis') || error.includes('procedure') || error.includes('service')) return 'clinical';\n    return 'general';\n  };\n\n  /**\n   * Get suggestion for error\n   */\n  const getSuggestionForError = (error: string): string => {\n    if (error.includes('Patient name')) return 'Enter patient\\'s full legal name in LAST, FIRST MI format';\n    if (error.includes('Provider NPI')) return 'Verify the 10-digit NPI number is correct';\n    if (error.includes('diagnosis')) return 'Add at least one valid ICD-10-CM diagnosis code';\n    if (error.includes('service')) return 'Add service lines with valid CPT codes and dates';\n    return 'Please review and correct this field';\n  };\n\n  /**\n   * Get warning impact level\n   */\n  const getWarningImpact = (warning: string): 'low' | 'medium' | 'high' => {\n    if (warning.includes('pointer') || warning.includes('modifier')) return 'medium';\n    if (warning.includes('ZIP') || warning.includes('format')) return 'low';\n    return 'medium';\n  };\n\n  /**\n   * Create validation categories\n   */\n  const createValidationCategories = (errors: ValidationError[], warnings: ValidationWarning[]): ValidationCategory[] => {\n    const categories = [\n      {\n        name: 'Patient Information',\n        icon: <User className=\"h-4 w-4\" />,\n        fields: ['patient_name', 'patient_dob', 'patient_gender', 'address']\n      },\n      {\n        name: 'Insurance Information',\n        icon: <CreditCard className=\"h-4 w-4\" />,\n        fields: ['insurance', 'policy_number', 'group_number']\n      },\n      {\n        name: 'Provider Information',\n        icon: <Building className=\"h-4 w-4\" />,\n        fields: ['provider_npi', 'provider_tax_id', 'provider_address']\n      },\n      {\n        name: 'Clinical Information',\n        icon: <Stethoscope className=\"h-4 w-4\" />,\n        fields: ['diagnosis_codes', 'service_lines', 'procedure_codes']\n      }\n    ];\n\n    return categories.map(category => {\n      const categoryErrors = errors.filter(e => category.fields.includes(e.field));\n      const categoryWarnings = warnings.filter(w => category.fields.includes(w.field));\n      \n      let status: 'valid' | 'warning' | 'error' = 'valid';\n      if (categoryErrors.length > 0) status = 'error';\n      else if (categoryWarnings.length > 0) status = 'warning';\n\n      return {\n        ...category,\n        status,\n        errorCount: categoryErrors.length,\n        warningCount: categoryWarnings.length\n      };\n    });\n  };\n\n  /**\n   * Calculate completion percentage\n   */\n  const calculateCompletionPercentage = (errors: ValidationError[], warnings: ValidationWarning[]): number => {\n    const totalRequiredFields = 20; // Approximate number of required fields\n    const errorCount = errors.length;\n    const warningCount = warnings.length;\n    \n    // Calculate based on issues found\n    const issueWeight = errorCount * 2 + warningCount;\n    const maxIssues = totalRequiredFields * 2;\n    \n    return Math.max(0, Math.min(100, 100 - (issueWeight / maxIssues) * 100));\n  };\n\n  /**\n   * Toggle category expansion\n   */\n  const toggleCategory = (categoryName: string) => {\n    const newExpanded = new Set(expandedCategories);\n    if (newExpanded.has(categoryName)) {\n      newExpanded.delete(categoryName);\n    } else {\n      newExpanded.add(categoryName);\n    }\n    setExpandedCategories(newExpanded);\n  };\n\n  /**\n   * Render validation overview\n   */\n  const renderOverview = () => {\n    if (!validation) return null;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Overall Status */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                {validation.isValid ? (\n                  <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                ) : (\n                  <AlertCircle className=\"h-8 w-8 text-red-500\" />\n                )}\n                <div>\n                  <h3 className=\"text-lg font-semibold\">\n                    {validation.isValid ? 'Form Ready for Generation' : 'Form Needs Attention'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {validation.errors.length} errors, {validation.warnings.length} warnings\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {validation.completionPercentage.toFixed(0)}%\n                </div>\n                <div className=\"text-sm text-gray-600\">Complete</div>\n              </div>\n            </div>\n            \n            <Progress value={validation.completionPercentage} className=\"h-2\" />\n          </CardContent>\n        </Card>\n\n        {/* Categories Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {validation.categories.map((category) => (\n            <Card key={category.name} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => toggleCategory(category.name)}>\n              <CardContent className=\"pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {category.icon}\n                    <div>\n                      <h4 className=\"font-medium\">{category.name}</h4>\n                      <div className=\"flex gap-2 mt-1\">\n                        {category.errorCount > 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            {category.errorCount} errors\n                          </Badge>\n                        )}\n                        {category.warningCount > 0 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {category.warningCount} warnings\n                          </Badge>\n                        )}\n                        {category.status === 'valid' && (\n                          <Badge variant=\"default\" className=\"text-xs\">\n                            Valid\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    {category.status === 'valid' && <CheckCircle className=\"h-5 w-5 text-green-500\" />}\n                    {category.status === 'warning' && <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />}\n                    {category.status === 'error' && <AlertCircle className=\"h-5 w-5 text-red-500\" />}\n                    \n                    {expandedCategories.has(category.name) ? (\n                      <ChevronDown className=\"h-4 w-4\" />\n                    ) : (\n                      <ChevronRight className=\"h-4 w-4\" />\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  /**\n   * Render detailed errors\n   */\n  const renderErrors = () => {\n    if (!validation || validation.errors.length === 0) {\n      return (\n        <div className=\"text-center py-8 text-gray-500\">\n          <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n          <p>No errors found! Form data is valid.</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {validation.errors.map((error, index) => (\n          <Alert key={index} variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"space-y-2\">\n                <div className=\"font-medium\">{error.message}</div>\n                {error.suggestion && (\n                  <div className=\"text-sm opacity-90\">\n                    <strong>Suggestion:</strong> {error.suggestion}\n                  </div>\n                )}\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {error.category}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {error.field}\n                  </Badge>\n                </div>\n              </div>\n            </AlertDescription>\n          </Alert>\n        ))}\n      </div>\n    );\n  };\n\n  /**\n   * Render warnings\n   */\n  const renderWarnings = () => {\n    if (!validation || validation.warnings.length === 0) {\n      return (\n        <div className=\"text-center py-8 text-gray-500\">\n          <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n          <p>No warnings found!</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {validation.warnings.map((warning, index) => (\n          <Alert key={index}>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"space-y-2\">\n                <div className=\"font-medium\">{warning.message}</div>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {warning.category}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    Impact: {warning.impact}\n                  </Badge>\n                </div>\n              </div>\n            </AlertDescription>\n          </Alert>\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin mr-2\" />\n          <span>Loading validation...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileCheck className=\"h-5 w-5\" />\n            CMS-1500 Validation\n          </CardTitle>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={loadValidation}\n            disabled={isLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"errors\">\n              Errors {validation?.errors.length ? `(${validation.errors.length})` : ''}\n            </TabsTrigger>\n            <TabsTrigger value=\"warnings\">\n              Warnings {validation?.warnings.length ? `(${validation.warnings.length})` : ''}\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\" className=\"mt-6\">\n            <ScrollArea className=\"h-96\">\n              {renderOverview()}\n            </ScrollArea>\n          </TabsContent>\n          \n          <TabsContent value=\"errors\" className=\"mt-6\">\n            <ScrollArea className=\"h-96\">\n              {renderErrors()}\n            </ScrollArea>\n          </TabsContent>\n          \n          <TabsContent value=\"warnings\" className=\"mt-6\">\n            <ScrollArea className=\"h-96\">\n              {renderWarnings()}\n            </ScrollArea>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CMS1500ValidationPanel;"