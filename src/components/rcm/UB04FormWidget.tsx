/**\n * UB04FormWidget Component\n * Compact widget for quick UB-04 form generation and status for institutional claims\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Building2,\n  Download,\n  Eye,\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  ExternalLink,\n  Calculator,\n  Stethoscope\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface UB04FormWidgetProps {\n  claimId: number;\n  onViewDetails?: () => void;\n  className?: string;\n  showPreview?: boolean;\n}\n\ninterface FormStatus {\n  canGenerate: boolean;\n  errorCount: number;\n  warningCount: number;\n  revenueLineCount: number;\n  diagnosisCount: number;\n  lastGenerated?: string;\n}\n\nconst UB04FormWidget: React.FC<UB04FormWidgetProps> = ({\n  claimId,\n  onViewDetails,\n  className,\n  showPreview = true\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [formStatus, setFormStatus] = useState<FormStatus | null>(null);\n  const [generationProgress, setGenerationProgress] = useState(0);\n\n  useEffect(() => {\n    loadFormStatus();\n  }, [claimId]);\n\n  /**\n   * Load form validation status\n   */\n  const loadFormStatus = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/v1/rcm/claims/${claimId}/ub04/validate`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load form status');\n      }\n\n      const data = await response.json();\n      const validation = data.data.validation;\n      \n      setFormStatus({\n        canGenerate: validation.isValid,\n        errorCount: validation.errors.length,\n        warningCount: validation.warnings.length,\n        revenueLineCount: data.data.revenueLineCount || 0,\n        diagnosisCount: data.data.diagnosisCount || 0\n      });\n    } catch (error) {\n      console.error('Error loading form status:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Quick generate form\n   */\n  const quickGenerate = async () => {\n    try {\n      setIsGenerating(true);\n      setGenerationProgress(0);\n\n      // Simulate progress\n      const progressInterval = setInterval(() => {\n        setGenerationProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 200);\n\n      const response = await fetch(`/api/v1/rcm/claims/${claimId}/ub04/generate`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      clearInterval(progressInterval);\n      setGenerationProgress(100);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to generate form');\n      }\n\n      // Handle PDF download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `UB04-${claimId}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      toast.success('UB-04 form generated successfully');\n      \n      // Update status\n      setFormStatus(prev => prev ? {\n        ...prev,\n        lastGenerated: new Date().toISOString()\n      } : null);\n    } catch (error) {\n      console.error('Error generating form:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to generate form');\n    } finally {\n      setIsGenerating(false);\n      setTimeout(() => setGenerationProgress(0), 1000);\n    }\n  };\n\n  /**\n   * Preview form data\n   */\n  const previewForm = async () => {\n    try {\n      const response = await fetch(`/api/v1/rcm/claims/${claimId}/ub04/preview`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load form preview');\n      }\n\n      const data = await response.json();\n      \n      // Show preview in a simple alert (in a real app, you might use a modal)\n      const fieldCount = data.data.fieldCount;\n      const estimatedSize = data.data.estimatedSize;\n      const revenueLines = data.data.revenueLineCount;\n      const diagnoses = data.data.diagnosisCount;\n      \n      toast.info(`UB-04 Preview: ${fieldCount} fields, ${revenueLines} revenue lines, ${diagnoses} diagnoses, ${estimatedSize}`);\n    } catch (error) {\n      console.error('Error previewing form:', error);\n      toast.error('Failed to preview form');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center py-6\">\n          <Loader2 className=\"h-5 w-5 animate-spin mr-2\" />\n          <span className=\"text-sm\">Loading...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between text-base\">\n          <div className=\"flex items-center gap-2\">\n            <Building2 className=\"h-4 w-4\" />\n            UB-04 Form\n          </div>\n          {onViewDetails && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onViewDetails}\n            >\n              <ExternalLink className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Status Section */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {formStatus?.canGenerate ? (\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            ) : (\n              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n            )}\n            <span className=\"text-sm font-medium\">\n              {formStatus?.canGenerate ? 'Ready' : 'Issues Found'}\n            </span>\n          </div>\n          \n          <div className=\"flex gap-1\">\n            {formStatus && formStatus.errorCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {formStatus.errorCount} errors\n              </Badge>\n            )}\n            {formStatus && formStatus.warningCount > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {formStatus.warningCount} warnings\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {/* Institutional Claim Info */}\n        {formStatus && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <Calculator className=\"h-3 w-3 text-gray-400\" />\n              <span className=\"text-gray-600\">Revenue Lines:</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {formStatus.revenueLineCount}\n              </Badge>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Stethoscope className=\"h-3 w-3 text-gray-400\" />\n              <span className=\"text-gray-600\">Diagnoses:</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {formStatus.diagnosisCount}\n              </Badge>\n            </div>\n          </div>\n        )}\n\n        {/* Progress Bar (shown during generation) */}\n        {isGenerating && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>Generating PDF...</span>\n              <span>{generationProgress}%</span>\n            </div>\n            <Progress value={generationProgress} className=\"h-2\" />\n          </div>\n        )}\n\n        {/* Last Generated */}\n        {formStatus?.lastGenerated && (\n          <div className=\"text-xs text-gray-500\">\n            Last generated: {new Date(formStatus.lastGenerated).toLocaleString()}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          {showPreview && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={previewForm}\n              className=\"flex-1\"\n            >\n              <Eye className=\"h-3 w-3 mr-1\" />\n              Preview\n            </Button>\n          )}\n          \n          <Button\n            onClick={quickGenerate}\n            disabled={isGenerating || !formStatus?.canGenerate}\n            size=\"sm\"\n            className=\"flex-1\"\n          >\n            {isGenerating ? (\n              <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n            ) : (\n              <Download className=\"h-3 w-3 mr-1\" />\n            )}\n            Generate\n          </Button>\n        </div>\n\n        {/* Error/Warning Summary */}\n        {formStatus && !formStatus.canGenerate && (\n          <div className=\"text-xs text-red-600 bg-red-50 p-2 rounded\">\n            Institutional claim has {formStatus.errorCount} error(s) that must be resolved before UB-04 generation.\n            {onViewDetails && (\n              <button\n                onClick={onViewDetails}\n                className=\"ml-1 underline hover:no-underline\"\n              >\n                View details\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Institutional Claim Type Badge */}\n        <div className=\"flex justify-center\">\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            Institutional Claim\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default UB04FormWidget;"