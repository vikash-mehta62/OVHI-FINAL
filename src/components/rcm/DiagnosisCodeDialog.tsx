/**\n * DiagnosisCodeDialog Component\n * Dialog for adding/editing diagnosis codes with POA indicators in UB-04 forms\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  RadioGroup,\n  RadioGroupItem,\n} from '@/components/ui/radio-group';\nimport {\n  CheckCircle,\n  AlertCircle,\n  Stethoscope,\n  Info\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface DiagnosisCode {\n  id?: number;\n  diagnosisCode: string;\n  description: string;\n  poaIndicator: string;\n  diagnosisType: 'principal' | 'secondary';\n  sequenceNumber: number;\n}\n\ninterface DiagnosisCodeDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (diagnosis: DiagnosisCode) => void;\n  editingDiagnosis: DiagnosisCode | null;\n}\n\n// POA Indicator options\nconst POA_INDICATORS = [\n  { value: 'Y', label: 'Y - Yes (Present on Admission)', description: 'Diagnosis was present at the time of admission' },\n  { value: 'N', label: 'N - No (Not Present on Admission)', description: 'Diagnosis was not present at the time of admission' },\n  { value: 'U', label: 'U - Unknown', description: 'Documentation insufficient to determine if present on admission' },\n  { value: 'W', label: 'W - Clinically Undetermined', description: 'Provider unable to clinically determine if present on admission' },\n  { value: '1', label: '1 - Unreported/Not Used', description: 'Exempt from POA reporting' }\n];\n\n// Common diagnosis codes for quick selection\nconst COMMON_DIAGNOSIS_CODES = [\n  { code: 'I21.9', description: 'Acute myocardial infarction, unspecified' },\n  { code: 'I50.9', description: 'Heart failure, unspecified' },\n  { code: 'J44.1', description: 'Chronic obstructive pulmonary disease with acute exacerbation' },\n  { code: 'N18.6', description: 'End stage renal disease' },\n  { code: 'E11.9', description: 'Type 2 diabetes mellitus without complications' },\n  { code: 'I10', description: 'Essential hypertension' },\n  { code: 'Z51.11', description: 'Encounter for antineoplastic chemotherapy' },\n  { code: 'M79.3', description: 'Panniculitis, unspecified' },\n  { code: 'R06.02', description: 'Shortness of breath' },\n  { code: 'R50.9', description: 'Fever, unspecified' }\n];\n\nconst DiagnosisCodeDialog: React.FC<DiagnosisCodeDialogProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  editingDiagnosis\n}) => {\n  const [formData, setFormData] = useState<DiagnosisCode>({\n    diagnosisCode: '',\n    description: '',\n    poaIndicator: 'Y',\n    diagnosisType: 'secondary',\n    sequenceNumber: 1\n  });\n  \n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [showPoaInfo, setShowPoaInfo] = useState(false);\n\n  // Initialize form data when dialog opens or editing diagnosis changes\n  useEffect(() => {\n    if (isOpen) {\n      if (editingDiagnosis) {\n        setFormData(editingDiagnosis);\n      } else {\n        setFormData({\n          diagnosisCode: '',\n          description: '',\n          poaIndicator: 'Y',\n          diagnosisType: 'secondary',\n          sequenceNumber: 1\n        });\n      }\n      setErrors({});\n    }\n  }, [isOpen, editingDiagnosis]);\n\n  /**\n   * Handle form field changes\n   */\n  const handleFieldChange = (field: keyof DiagnosisCode, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error for this field\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  /**\n   * Select a common diagnosis code\n   */\n  const selectCommonCode = (code: string, description: string) => {\n    setFormData(prev => ({\n      ...prev,\n      diagnosisCode: code,\n      description\n    }));\n  };\n\n  /**\n   * Validate ICD-10-CM code format\n   */\n  const validateICD10Code = (code: string): boolean => {\n    // Basic ICD-10-CM format validation\n    // Real implementation would use a comprehensive ICD-10-CM validator\n    const icd10Pattern = /^[A-Z]\\d{2}(\\.\\d{1,4})?$/;\n    return icd10Pattern.test(code);\n  };\n\n  /**\n   * Validate form data\n   */\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.diagnosisCode) {\n      newErrors.diagnosisCode = 'Diagnosis code is required';\n    } else if (!validateICD10Code(formData.diagnosisCode)) {\n      newErrors.diagnosisCode = 'Invalid ICD-10-CM code format';\n    }\n\n    if (!formData.description) {\n      newErrors.description = 'Description is required';\n    }\n\n    if (!formData.poaIndicator) {\n      newErrors.poaIndicator = 'POA indicator is required';\n    }\n\n    if (!formData.diagnosisType) {\n      newErrors.diagnosisType = 'Diagnosis type is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = () => {\n    if (!validateForm()) {\n      toast.error('Please correct the errors before saving');\n      return;\n    }\n\n    onSave(formData);\n  };\n\n  /**\n   * Get POA indicator info\n   */\n  const getPoaIndicatorInfo = (indicator: string) => {\n    return POA_INDICATORS.find(poa => poa.value === indicator);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Stethoscope className=\"h-5 w-5\" />\n            {editingDiagnosis ? 'Edit Diagnosis Code' : 'Add Diagnosis Code'}\n          </DialogTitle>\n          <DialogDescription>\n            Enter ICD-10-CM diagnosis code with Present on Admission (POA) indicator\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Common Diagnosis Codes */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Quick Select Common Codes</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {COMMON_DIAGNOSIS_CODES.slice(0, 6).map((item) => (\n                <Button\n                  key={item.code}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => selectCommonCode(item.code, item.description)}\n                  className=\"justify-start text-left h-auto p-2\"\n                >\n                  <div>\n                    <div className=\"font-mono text-xs\">{item.code}</div>\n                    <div className=\"text-xs text-gray-600 truncate\">{item.description}</div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Diagnosis Code Input */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"diagnosisCode\">ICD-10-CM Code *</Label>\n              <Input\n                id=\"diagnosisCode\"\n                value={formData.diagnosisCode}\n                onChange={(e) => handleFieldChange('diagnosisCode', e.target.value.toUpperCase())}\n                placeholder=\"I21.9\"\n                className={errors.diagnosisCode ? 'border-red-500' : ''}\n              />\n              {errors.diagnosisCode && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.diagnosisCode}</p>\n              )}\n              {formData.diagnosisCode && validateICD10Code(formData.diagnosisCode) && (\n                <div className=\"flex items-center gap-2 text-green-600 mt-1\">\n                  <CheckCircle className=\"h-3 w-3\" />\n                  <span className=\"text-xs\">Valid ICD-10-CM format</span>\n                </div>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description *</Label>\n              <Input\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleFieldChange('description', e.target.value)}\n                placeholder=\"Acute myocardial infarction, unspecified\"\n                className={errors.description ? 'border-red-500' : ''}\n              />\n              {errors.description && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.description}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Diagnosis Type */}\n          <div>\n            <Label className=\"text-sm font-medium mb-3 block\">Diagnosis Type *</Label>\n            <RadioGroup\n              value={formData.diagnosisType}\n              onValueChange={(value) => handleFieldChange('diagnosisType', value as 'principal' | 'secondary')}\n              className=\"flex gap-6\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"principal\" id=\"principal\" />\n                <Label htmlFor=\"principal\" className=\"flex items-center gap-2\">\n                  Principal Diagnosis\n                  <Badge variant=\"default\">Primary</Badge>\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"secondary\" id=\"secondary\" />\n                <Label htmlFor=\"secondary\" className=\"flex items-center gap-2\">\n                  Secondary Diagnosis\n                  <Badge variant=\"outline\">Additional</Badge>\n                </Label>\n              </div>\n            </RadioGroup>\n            {errors.diagnosisType && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.diagnosisType}</p>\n            )}\n          </div>\n\n          {/* POA Indicator */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Label className=\"text-sm font-medium\">Present on Admission (POA) Indicator *</Label>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowPoaInfo(!showPoaInfo)}\n              >\n                <Info className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            <Select\n              value={formData.poaIndicator}\n              onValueChange={(value) => handleFieldChange('poaIndicator', value)}\n            >\n              <SelectTrigger className={errors.poaIndicator ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Select POA indicator\" />\n              </SelectTrigger>\n              <SelectContent>\n                {POA_INDICATORS.map((poa) => (\n                  <SelectItem key={poa.value} value={poa.value}>\n                    <div>\n                      <div className=\"font-medium\">{poa.label}</div>\n                      <div className=\"text-xs text-gray-600\">{poa.description}</div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            {errors.poaIndicator && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.poaIndicator}</p>\n            )}\n            \n            {formData.poaIndicator && (\n              <div className=\"mt-2 p-2 bg-blue-50 rounded-md\">\n                <div className=\"text-sm font-medium text-blue-900\">\n                  {getPoaIndicatorInfo(formData.poaIndicator)?.label}\n                </div>\n                <div className=\"text-xs text-blue-700\">\n                  {getPoaIndicatorInfo(formData.poaIndicator)?.description}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* POA Information */}\n          {showPoaInfo && (\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <div className=\"font-medium\">Present on Admission (POA) Indicators:</div>\n                  <ul className=\"text-sm space-y-1\">\n                    <li><strong>Y:</strong> Diagnosis was present at the time of inpatient admission</li>\n                    <li><strong>N:</strong> Diagnosis was not present at the time of inpatient admission</li>\n                    <li><strong>U:</strong> Documentation is insufficient to determine if condition was present</li>\n                    <li><strong>W:</strong> Provider is unable to clinically determine if condition was present</li>\n                    <li><strong>1:</strong> Exempt from POA reporting (certain diagnosis codes)</li>\n                  </ul>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Validation Summary */}\n          {Object.keys(errors).length > 0 && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Please correct the following errors:\n                <ul className=\"list-disc list-inside mt-2\">\n                  {Object.values(errors).map((error, index) => (\n                    <li key={index} className=\"text-sm\">{error}</li>\n                  ))}\n                </ul>\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit}>\n            {editingDiagnosis ? 'Update' : 'Add'} Diagnosis\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default DiagnosisCodeDialog;"