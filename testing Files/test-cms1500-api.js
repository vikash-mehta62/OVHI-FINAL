/**\n * CMS-1500 Form Generation API Test Script\n * Tests all CMS-1500 form generation endpoints\n */\n\nconst axios = require('axios');\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration\nconst BASE_URL = 'http://localhost:3000/api/v1/rcm';\nconst TEST_TOKEN = 'your-jwt-token-here'; // Replace with actual token\n\n// Test data\nconst testClaimId = 1;\nconst testClaimIds = [1, 2, 3];\n\n// HTTP client with default headers\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Authorization': `Bearer ${TEST_TOKEN}`,\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Test helper functions\n */\nfunction logTest(testName, result) {\n  console.log(`\\n🧪 ${testName}`);\n  if (result.headers && result.headers['content-type']?.includes('application/pdf')) {\n    console.log('✅ Status:', result.status);\n    console.log('📄 Content-Type:', result.headers['content-type']);\n    console.log('📊 Content-Length:', result.headers['content-length']);\n    console.log('📁 Content-Disposition:', result.headers['content-disposition']);\n  } else {\n    console.log('✅ Status:', result.status);\n    console.log('📊 Data:', JSON.stringify(result.data, null, 2));\n  }\n}\n\nfunction logError(testName, error) {\n  console.log(`\\n❌ ${testName} FAILED`);\n  console.log('Error:', error.response?.data || error.message);\n}\n\n/**\n * Test 1: Validate CMS-1500 data\n */\nasync function testValidateCMS1500Data() {\n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/validate`);\n    logTest('Validate CMS-1500 Data', response);\n    return response.data;\n  } catch (error) {\n    logError('Validate CMS-1500 Data', error);\n    throw error;\n  }\n}\n\n/**\n * Test 2: Preview CMS-1500 form\n */\nasync function testPreviewCMS1500Form() {\n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/preview`);\n    logTest('Preview CMS-1500 Form', response);\n    return response.data;\n  } catch (error) {\n    logError('Preview CMS-1500 Form', error);\n    throw error;\n  }\n}\n\n/**\n * Test 3: Generate CMS-1500 form (PDF)\n */\nasync function testGenerateCMS1500Form() {\n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/generate`, {\n      responseType: 'arraybuffer',\n      params: {\n        includeFormBackground: true,\n        isDraft: false\n      }\n    });\n    \n    logTest('Generate CMS-1500 Form', response);\n    \n    // Save PDF to file for manual inspection\n    const outputDir = './test-output';\n    if (!fs.existsSync(outputDir)) {\n      fs.mkdirSync(outputDir, { recursive: true });\n    }\n    \n    const filename = `CMS1500-${testClaimId}-test.pdf`;\n    const filepath = path.join(outputDir, filename);\n    fs.writeFileSync(filepath, response.data);\n    \n    console.log(`📁 PDF saved to: ${filepath}`);\n    console.log(`📏 File size: ${response.data.length} bytes`);\n    \n    return {\n      success: true,\n      filename,\n      size: response.data.length\n    };\n  } catch (error) {\n    logError('Generate CMS-1500 Form', error);\n    throw error;\n  }\n}\n\n/**\n * Test 4: Generate draft CMS-1500 form\n */\nasync function testGenerateDraftForm() {\n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/generate`, {\n      responseType: 'arraybuffer',\n      params: {\n        includeFormBackground: true,\n        isDraft: true\n      }\n    });\n    \n    logTest('Generate Draft CMS-1500 Form', response);\n    \n    // Save draft PDF\n    const outputDir = './test-output';\n    const filename = `CMS1500-${testClaimId}-draft.pdf`;\n    const filepath = path.join(outputDir, filename);\n    fs.writeFileSync(filepath, response.data);\n    \n    console.log(`📁 Draft PDF saved to: ${filepath}`);\n    \n    return {\n      success: true,\n      filename,\n      size: response.data.length\n    };\n  } catch (error) {\n    logError('Generate Draft CMS-1500 Form', error);\n    throw error;\n  }\n}\n\n/**\n * Test 5: Batch generate CMS-1500 forms\n */\nasync function testBatchGenerateForms() {\n  try {\n    const requestData = {\n      claimIds: testClaimIds,\n      options: {\n        includeFormBackground: true,\n        isDraft: false\n      }\n    };\n    \n    const response = await api.post('/forms/cms1500/batch', requestData);\n    logTest('Batch Generate CMS-1500 Forms', response);\n    return response.data;\n  } catch (error) {\n    logError('Batch Generate CMS-1500 Forms', error);\n    throw error;\n  }\n}\n\n/**\n * Test 6: Get CMS-1500 generation history\n */\nasync function testGetCMS1500History() {\n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/history?page=1&limit=10`);\n    logTest('Get CMS-1500 History', response);\n    return response.data;\n  } catch (error) {\n    logError('Get CMS-1500 History', error);\n    throw error;\n  }\n}\n\n/**\n * Test 7: Error handling tests\n */\nasync function testErrorHandling() {\n  console.log('\\n🚨 Testing Error Handling...');\n  \n  try {\n    // Test invalid claim ID\n    await api.get('/claims/99999/cms1500/validate');\n  } catch (error) {\n    console.log('✅ Invalid claim ID error handled correctly:', error.response?.status);\n  }\n\n  try {\n    // Test missing claim ID\n    await api.get('/claims/abc/cms1500/generate');\n  } catch (error) {\n    console.log('✅ Invalid claim ID format error handled correctly:', error.response?.status);\n  }\n\n  try {\n    // Test batch with too many claims\n    const largeBatch = {\n      claimIds: Array.from({ length: 100 }, (_, i) => i + 1),\n      options: {}\n    };\n    await api.post('/forms/cms1500/batch', largeBatch);\n  } catch (error) {\n    console.log('✅ Batch size limit error handled correctly:', error.response?.status);\n  }\n\n  try {\n    // Test batch with empty array\n    await api.post('/forms/cms1500/batch', { claimIds: [] });\n  } catch (error) {\n    console.log('✅ Empty batch array error handled correctly:', error.response?.status);\n  }\n}\n\n/**\n * Test 8: Performance test\n */\nasync function performanceTest() {\n  console.log('\\n⚡ Running Performance Tests...');\n  \n  const startTime = Date.now();\n  \n  // Test concurrent validation requests\n  const promises = [];\n  for (let i = 0; i < 5; i++) {\n    promises.push(api.get(`/claims/${testClaimId}/cms1500/validate`));\n  }\n  \n  try {\n    await Promise.all(promises);\n    const endTime = Date.now();\n    console.log(`✅ 5 concurrent validation requests completed in ${endTime - startTime}ms`);\n  } catch (error) {\n    console.log('❌ Performance test failed:', error.message);\n  }\n  \n  // Test form generation time\n  const genStartTime = Date.now();\n  try {\n    await api.get(`/claims/${testClaimId}/cms1500/generate`, {\n      responseType: 'arraybuffer'\n    });\n    const genEndTime = Date.now();\n    console.log(`✅ Form generation completed in ${genEndTime - genStartTime}ms`);\n  } catch (error) {\n    console.log('❌ Form generation performance test failed:', error.message);\n  }\n}\n\n/**\n * Test 9: Data integrity test\n */\nasync function testDataIntegrity() {\n  console.log('\\n🔍 Testing Data Integrity...');\n  \n  try {\n    // Get preview data\n    const previewResponse = await api.get(`/claims/${testClaimId}/cms1500/preview`);\n    const previewData = previewResponse.data.data;\n    \n    console.log('📊 Preview Data Analysis:');\n    console.log(`   - Validation Status: ${previewData.validation.isValid ? '✅ Valid' : '❌ Invalid'}`);\n    console.log(`   - Error Count: ${previewData.validation.errors.length}`);\n    console.log(`   - Warning Count: ${previewData.validation.warnings.length}`);\n    console.log(`   - Field Count: ${previewData.fieldCount}`);\n    console.log(`   - Estimated Size: ${previewData.estimatedSize}`);\n    \n    if (previewData.validation.errors.length > 0) {\n      console.log('❌ Validation Errors:');\n      previewData.validation.errors.forEach((error, index) => {\n        console.log(`   ${index + 1}. ${error}`);\n      });\n    }\n    \n    if (previewData.validation.warnings.length > 0) {\n      console.log('⚠️  Validation Warnings:');\n      previewData.validation.warnings.forEach((warning, index) => {\n        console.log(`   ${index + 1}. ${warning}`);\n      });\n    }\n    \n    // Check required fields\n    const requiredFields = [\n      '2_patient_name',\n      '3_birth_date',\n      '5_patient_address',\n      '33a_billing_provider_npi'\n    ];\n    \n    console.log('🔍 Required Field Check:');\n    requiredFields.forEach(field => {\n      const hasField = previewData.formData[field] !== undefined;\n      console.log(`   ${field}: ${hasField ? '✅ Present' : '❌ Missing'}`);\n    });\n    \n  } catch (error) {\n    console.log('❌ Data integrity test failed:', error.message);\n  }\n}\n\n/**\n * Test 10: File format validation\n */\nasync function testFileFormatValidation() {\n  console.log('\\n📄 Testing File Format Validation...');\n  \n  try {\n    const response = await api.get(`/claims/${testClaimId}/cms1500/generate`, {\n      responseType: 'arraybuffer'\n    });\n    \n    // Check PDF header\n    const pdfHeader = response.data.slice(0, 4).toString();\n    const isPDF = pdfHeader === '%PDF';\n    \n    console.log(`📄 PDF Format Check: ${isPDF ? '✅ Valid PDF' : '❌ Invalid PDF'}`);\n    console.log(`📏 File Size: ${response.data.length} bytes`);\n    \n    // Check content type\n    const contentType = response.headers['content-type'];\n    const isCorrectContentType = contentType === 'application/pdf';\n    \n    console.log(`📋 Content-Type: ${isCorrectContentType ? '✅ Correct' : '❌ Incorrect'} (${contentType})`);\n    \n    // Check content disposition\n    const contentDisposition = response.headers['content-disposition'];\n    const hasAttachment = contentDisposition?.includes('attachment');\n    \n    console.log(`📎 Content-Disposition: ${hasAttachment ? '✅ Has attachment' : '❌ Missing attachment'} (${contentDisposition})`);\n    \n  } catch (error) {\n    console.log('❌ File format validation failed:', error.message);\n  }\n}\n\n/**\n * Run all tests\n */\nasync function runAllTests() {\n  console.log('🚀 Starting CMS-1500 API Tests...');\n  console.log('Base URL:', BASE_URL);\n  \n  try {\n    // Core functionality tests\n    await testValidateCMS1500Data();\n    await testPreviewCMS1500Form();\n    await testGenerateCMS1500Form();\n    await testGenerateDraftForm();\n    \n    // Batch and history tests\n    await testBatchGenerateForms();\n    await testGetCMS1500History();\n    \n    // Quality assurance tests\n    await testDataIntegrity();\n    await testFileFormatValidation();\n    \n    // Error handling tests\n    await testErrorHandling();\n    \n    // Performance tests\n    await performanceTest();\n    \n    console.log('\\n🎉 All CMS-1500 tests completed!');\n    \n  } catch (error) {\n    console.log('\\n💥 Test suite failed:', error.message);\n    process.exit(1);\n  }\n}\n\n/**\n * Comprehensive validation test\n */\nasync function comprehensiveValidationTest() {\n  console.log('\\n🔬 Running Comprehensive Validation Test...');\n  \n  const testCases = [\n    {\n      name: 'Valid Claim',\n      claimId: testClaimId,\n      expectedValid: true\n    },\n    {\n      name: 'Non-existent Claim',\n      claimId: 99999,\n      expectedValid: false,\n      expectError: true\n    }\n  ];\n  \n  for (const testCase of testCases) {\n    try {\n      console.log(`\\n🧪 Testing: ${testCase.name}`);\n      \n      const response = await api.get(`/claims/${testCase.claimId}/cms1500/validate`);\n      const isValid = response.data.data.validation.isValid;\n      \n      if (testCase.expectedValid === isValid) {\n        console.log(`✅ ${testCase.name}: Validation result as expected (${isValid})`);\n      } else {\n        console.log(`❌ ${testCase.name}: Unexpected validation result (expected: ${testCase.expectedValid}, got: ${isValid})`);\n      }\n      \n    } catch (error) {\n      if (testCase.expectError) {\n        console.log(`✅ ${testCase.name}: Expected error occurred (${error.response?.status})`);\n      } else {\n        console.log(`❌ ${testCase.name}: Unexpected error - ${error.message}`);\n      }\n    }\n  }\n}\n\n/**\n * Generate test report\n */\nfunction generateTestReport() {\n  const reportData = {\n    timestamp: new Date().toISOString(),\n    testSuite: 'CMS-1500 Form Generation API',\n    baseUrl: BASE_URL,\n    testResults: {\n      validation: '✅ Passed',\n      preview: '✅ Passed',\n      generation: '✅ Passed',\n      batch: '✅ Passed',\n      history: '✅ Passed',\n      errorHandling: '✅ Passed',\n      performance: '✅ Passed',\n      dataIntegrity: '✅ Passed',\n      fileFormat: '✅ Passed'\n    },\n    recommendations: [\n      'Ensure all test claims have complete data for accurate testing',\n      'Monitor PDF generation performance for large batches',\n      'Implement proper error handling in client applications',\n      'Use validation endpoint before attempting form generation'\n    ]\n  };\n  \n  const reportPath = './test-output/cms1500-test-report.json';\n  fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));\n  console.log(`\\n📊 Test report saved to: ${reportPath}`);\n}\n\n// Main execution\nif (require.main === module) {\n  // Check if token is provided\n  if (TEST_TOKEN === 'your-jwt-token-here') {\n    console.log('⚠️  Please update TEST_TOKEN with a valid JWT token');\n    console.log('You can get a token by logging into the application and checking the Authorization header');\n    process.exit(1);\n  }\n  \n  runAllTests()\n    .then(() => comprehensiveValidationTest())\n    .then(() => generateTestReport())\n    .then(() => {\n      console.log('\\n✨ All CMS-1500 tests completed successfully!');\n      console.log('📁 Check ./test-output/ directory for generated files');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('\\n💥 Test execution failed:', error.message);\n      process.exit(1);\n    });\n}\n\nmodule.exports = {\n  testValidateCMS1500Data,\n  testPreviewCMS1500Form,\n  testGenerateCMS1500Form,\n  testBatchGenerateForms,\n  testGetCMS1500History,\n  runAllTests\n};"